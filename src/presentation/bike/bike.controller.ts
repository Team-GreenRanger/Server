import { Controller, Get, Post } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { SeoulBikeService } from '../../infrastructure/external-apis/seoul-bike/seoul-bike.service';\nimport { BikeNetworkSchedulerService } from '../../infrastructure/scheduler/bike-network-scheduler.service';\n\n@ApiTags('Bike Management')\n@Controller('bikes')\nexport class BikeController {\n  constructor(\n    private readonly seoulBikeService: SeoulBikeService,\n    private readonly bikeSchedulerService: BikeNetworkSchedulerService,\n  ) {}\n\n  @Get('seoul/status')\n  @ApiOperation({ summary: '서울 따릉이 데이터 상태 확인' })\n  @ApiResponse({ status: 200, description: '서울 따릉이 데이터 상태' })\n  async getSeoulBikeStatus() {\n    const stationCount = await this.seoulBikeService.getStationCount();\n    const networkInfo = await this.seoulBikeService.getNetworkInfo();\n    \n    return {\n      hasData: stationCount > 0,\n      stationCount,\n      networkInfo: networkInfo ? {\n        id: networkInfo.id,\n        name: networkInfo.name,\n        city: networkInfo.city,\n        country: networkInfo.country,\n        createdAt: networkInfo.createdAt,\n        updatedAt: networkInfo.updatedAt,\n      } : null,\n    };\n  }\n\n  @Post('seoul/sync')\n  @ApiOperation({ summary: '서울 따릉이 데이터 수동 동기화 (테스트용)' })\n  @ApiResponse({ status: 200, description: '동기화 완료' })\n  async syncSeoulBikes() {\n    await this.bikeSchedulerService.syncSeoulBikes();\n    \n    const stationCount = await this.seoulBikeService.getStationCount();\n    return {\n      success: true,\n      message: '서울 따릉이 데이터 동기화 완료',\n      stationCount,\n      timestamp: new Date(),\n    };\n  }\n\n  @Post('global/sync')\n  @ApiOperation({ summary: '전세계 자전거 네트워크 수동 동기화 (테스트용)' })\n  @ApiResponse({ status: 200, description: '동기화 완료' })\n  async syncGlobalBikes() {\n    await this.bikeSchedulerService.syncBikeNetworks();\n    \n    return {\n      success: true,\n      message: '전세계 자전거 네트워크 동기화 완료',\n      timestamp: new Date(),\n    };\n  }\n}\n